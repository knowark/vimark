" #######
" Plugins
" #######

" Vim-Plug
" ========

if empty(glob('~/.vim/autoload/plug.vim'))
silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
\ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" Packages
" ========

if empty(glob('/etc/vim/plugged'))
silent !mkdir -p /etc/vim/plugged
endif

call plug#begin(expand('/etc/vim/plugged'))
Plug 'airblade/vim-gitgutter'
Plug 'airblade/vim-rooter'
Plug 'andrewradev/tagalong.vim'
Plug 'brooth/far.vim'
Plug 'cakebaker/scss-syntax.vim'
Plug 'chrisbra/colorizer'
Plug 'chrisbra/csv.vim'
Plug 'cosminadrianpopescu/vim-tail'
Plug 'dense-analysis/ale'
Plug 'dyng/ctrlsf.vim'
Plug 'ervandew/supertab'
Plug 'flazz/vim-colorschemes'
Plug 'herringtondarkholme/yats.vim'
Plug 'honza/vim-snippets'
Plug 'itchyny/vim-gitbranch'
Plug 'jonsmithers/vim-html-template-literals'
Plug 'jparise/vim-graphql'
Plug 'junegunn/vim-easy-align'
Plug 'junegunn/vim-plug'
Plug 'lfilho/cosco.vim'
Plug 'luochen1990/rainbow'
Plug 'mattn/emmet-vim'
Plug 'mhinz/vim-startify'
Plug 'mitsuhiko/vim-rst'
Plug 'nathanaelkane/vim-indent-guides'
Plug 'neoclide/coc-tsserver'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'nlknguyen/vim-maven-syntax'
Plug 'pangloss/vim-javascript'
Plug 'raimondi/delimitmate'
Plug 'rhysd/vim-grammarous'
Plug 'roxma/nvim-yarp'
Plug 'roxma/vim-hug-neovim-rpc'
Plug 'ryanoasis/vim-devicons'
Plug 'scrooloose/nerdcommenter'
Plug 'scrooloose/nerdtree'
Plug 'sheerun/vim-polyglot'
Plug 'sirVer/ultisnips'
Plug 'stormherz/tablify'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-haml'
Plug 'tpope/vim-surround'
Plug 'vim-airline/vim-airline'
Plug 'vim-scripts/dbext.vim'
Plug 'vim-scripts/vim-auto-save'
Plug 'vim-voom/voom'
Plug 'xuyuanp/nerdtree-git-plugin'
Plug 'zivyangll/git-blame.vim'
call plug#end()

" #######
" Options
" #######

set mouse=a
set nocompatible
set scrolloff=5
set ttyfast
set laststatus=2
set showmode
set showcmd
set noswapfile
set encoding=utf-8
set clipboard=unnamed
set clipboard=unnamedplus

set number
set linebreak
set showbreak=+++
set colorcolumn=80
set nowrap
set hlsearch
set lazyredraw
set fillchars+=vert:║

set ignorecase
set smartcase
set incsearch
set confirm
set ruler

set autoindent
set expandtab
set shiftwidth=2
set smarttab
set softtabstop=2
set cmdheight=2
set shortmess+=c

set undolevels=1000
set backspace=indent,eol,start
set autowrite
set autowriteall
set showtabline=2
set signcolumn=number
set completeopt-=preview

set updatetime=300
set nobackup
set nowritebackup
set foldmethod=syntax
set nofoldenable

" #########
" Variables
" #########

let g:auto_save = 1
let g:auto_save_in_insert_mode = 0
let g:ale_fix_on_save = 1
let g:ale_linters_explicit = 1
let g:ale_completion_enabled = 0
let g:ale_completion_autoimport = 1
let g:ale_linters = {
\ 'javascript': ['tsserver', 'standard']
\}
let g:ale_fixers = {
\   '*': ['remove_trailing_lines', 'trim_whitespace'],
\   'javascript': ['standard'],
\   'html': ['prettier']
\}
let g:ale_sign_error = '✘'
let g:ale_sign_warning = '⚠'
let g:airline#extensions#ale#enabled = 1
let g:rooter_patterns = ['.git']
let g:ctrlsf_default_root = 'project'
let g:ctrlsf_auto_focus = {
\ "at": "start"
\ }
let g:ctrlsf_mapping = {
\ "popen": "<Space>"
\ }
let g:delimitMate_expand_cr = 1
let g:delimitMate_expand_space = 1
let g:javascript_plugin_jsdoc = 1
let g:html_indent_style1 = "inc"
let g:htl_all_templates = 1
let g:htl_css_templates = 1
let g:far#source = 'rg'
let g:far#ignore_files = ['.gitignore']
let g:far#preview_window_height = 15
let g:UltiSnipsExpandTrigger = "<leader>Enter"
let g:user_emmet_mode='n'
let g:user_emmet_leader_key=','
let g:voom_default_mode = "markdown"
let g:voom_tree_placement = "right"
let g:voom_tree_width = 50
let g:voom_tab_key = "<S-Tab>"
let g:grammarous#show_first_error = 1
let g:coc_disable_startup_warning = 1
let g:javascript_plugin_jsdoc = 1
let g:colorizer_auto_filetype='css,html,js'
let g:NERDTreeWinSize=30
let g:NERDTreeShowHidden=1

" #####
" Theme
" #####

syntax on
set background=dark
colorscheme jellybeans

let java_highlight_functions = 1
let java_highlight_all = 1
highlight link javaScopeDecl Statement
highlight link javaType Type
highlight link javaDocTags PreProc

" ###########
" Autocommand
" ###########

autocmd VimEnter *  NERDTree | wincmd w
autocmd InsertLeave * silent! update
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree")
\ && b:NERDTree.isTabTree()) | q | endif
autocmd ColorScheme * highlight Pmenu ctermfg=NONE ctermbg=236
\ cterm=NONE guifg=NONE guibg=#64666d gui=NONE
autocmd ColorScheme * highlight PmenuSel ctermfg=NONE ctermbg=24
\ cterm=NONE guifg=NONE guibg=#204a87 gui=NONE
autocmd ColorScheme * highlight Search ctermfg=NONE ctermbg=11
\ cterm=reverse guifg=NONE guibg=#204a87 gui=NONE
command! BufOnly execute '%bdelete|edit #|normal `"'

autocmd FileType html setlocal shiftwidth=2 tabstop=2
autocmd FileType css setlocal shiftwidth=2 tabstop=2
autocmd FileType scss setlocal shiftwidth=2 tabstop=2
autocmd FileType sass setlocal shiftwidth=2 tabstop=2
autocmd FileType gql setlocal shiftwidth=2 tabstop=2
autocmd FileType java setlocal shiftwidth=2 tabstop=2
autocmd FileType javascript setlocal shiftwidth=2 tabstop=2
autocmd FileType json setlocal shiftwidth=2 tabstop=2
autocmd FileType markdown vmap <Leader><Bslash> :EasyAlign*<Bar><Enter>

autocmd FileType css,java nmap <silent> <Leader>; <Plug>(cosco-commaOrSemiColon)
autocmd FileType css,java imap <silent> <Leader>; <c-o><Plug>(cosco-commaOrSemiColon)

" #########
" Shortcuts
" #########

map <space> <leader>
map <S-Tab> :tabn<CR>
map <tab> <c-w>
nmap <silent> <esc><esc> :noh<return>
imap <c-space> <c-x><c-o>

nmap <Bs> dd
tmap <silent> <F12> <C-W>N
nmap <expr> <S-F12> getbufvar('%', '&buftype') == 'terminal' ? ':q!<CR>' : ''
nmap <expr> <F12> getbufvar('%', '&buftype') != 'terminal' ?
\ ':tabnew <Bar> terminal ++curwin<CR>' : ''

nmap <A-Up> :m .-2<CR>==
nmap <A-Down> :m .+1<CR>==
imap <A-Up> <Esc>:m .-2<CR>==gi
imap <A-Down> <Esc>:m .+1<CR>==gi
vmap <A-Up> :m '<-2<CR>gv=gv
vmap <A-Down> :m '>+1<CR>gv=gv
nmap <S-Up> V
nmap <S-Down> V
vmap <S-Up> k
vmap <S-Down> j

nmap FF :Git<CR>
nmap <Leader>gs :Gstatus<CR>
nmap <Leader>gc :Gcommit<CR>
nmap <Leader>gd :Gdiff<CR>
nmap <Leader>gb :Gblame<CR>
nmap <Leader>gr :Gread<CR>
nmap <Leader>gw :Gwrite<CR>
nmap <Leader>gp :Gpush<CR>
nmap <Leader>g- :Silent Git stash<CR>:e<CR>
nmap <Leader>g+ :Silent Git stash pop<CR>:e<CR>
nmap <Leader>n  :NERDTreeFind<CR>
nmap <Leader>d :bp<cr>:bd #<CR>
nmap <C-S-Up> :Gpush<CR>
nmap <C-S-Down> :Gpull<CR>
nmap <C-S-CR> :Gcommit<CR>
nmap <C-_> <Plug>NERDCommenterToggle
vmap <C-_> <Plug>NERDCommenterToggle<Bar>gv
imap <C-Space> <C-x><C-o>
imap <C-@> <C-Space>

nmap <C-F> <Plug>CtrlSFPrompt
vmap <C-F> <Plug>CtrlSFVwordPath
vmap <C-F>F <Plug>CtrlSFVwordExec
nmap <C-F>n <Plug>CtrlSFCwordPath
nmap <C-F>p <Plug>CtrlSFPwordPath
nmap <C-F>o :CtrlSFOpen<CR>
nmap <C-F>t :CtrlSFToggle<CR>
imap <C-F>t <Esc>:CtrlSFToggle<CR>

" ########
" startify
" ########

let g:startify_lists = [
  \ { 'type': 'dir', 'header': ['   MRU '. getcwd()] },
  \ ]

" ########
" coc.nvim
" ########

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: There's always complete item selected by default, you may want to enable
" no select by `"suggest.noselect": true` in your configuration file.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ coc#pum#visible() ? coc#pum#next(1) :
      \ CheckBackspace() ? "\<Tab>" :
      \ coc#refresh()
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

" Make <CR> to accept selected completion item or notify coc.nvim to format
" <C-g>u breaks current undo, please make your own choice.
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

function! CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call ShowDocumentation()<CR>

function! ShowDocumentation()
  if CocAction('hasProvider', 'hover')
    call CocActionAsync('doHover')
  else
    call feedkeys('K', 'in')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current buffer.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" Run the Code Lens action on the current line.
nmap <leader>cl  <Plug>(coc-codelens-action)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" Use CTRL-S for selections ranges.
" Requires 'textDocument/selectionRange' support of language server.
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocActionAsync('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocActionAsync('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Mappings for CoCList
" Show all diagnostics.
nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions.
nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document.
nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols.
nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list.
nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>
